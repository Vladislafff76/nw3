class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self, *args):
        '''
        У объекта класса есть три атрибута - первый узел, последний узел и длина списка. Данные атрибуты можно использовать только внутри класса
        '''
        
        self.head = None
        self.tail = None
        self.length = 0

        if len(args) > 0:
            for data in args:
                self.add_back(data)
        pass

    def add_forward(self, el):
        '''
        Добавляет элемент в начало списка со сложностью O(1)

        >>> l1 = LinkedList(1,2,3)
        >>> l1.add_forward(0)
        >>> print(l1)
        (0 -> 1 -> 2 -> 3)

        >>> l2 = LinkedList(l1, LinkedList(4,5, LinkedList(6,7)), 1)
        >>> print(l2)
        ((0 -> 1 -> 2 -> 3) -> (4 -> 5 -> (6 -> 7)) -> 1)
        >>> l2.add_forward(LinkedList(-2, -1))
        >>> print(l2)
        ((-2 -> -1) -> (0 -> 1 -> 2 -> 3) -> (4 -> 5 -> (6 -> 7)) -> 1)
        '''
        
        new_node = Node(el)
        new_node.next = self.head
        self.head = new_node
        if self.length == 0:
            self.tail = new_node
        self.length += 1
        pass


    def add_back(self, el):
        '''
        Добавляет элемент в конец списка со сложностью O(1)

        >>> l1 = LinkedList(1,2,3)
        >>> l1.add_back(4)
        >>> print(l1)
        (1 -> 2 -> 3 -> 4)

        >>> l2 = LinkedList(l1, LinkedList(5,6, LinkedList(7,8)), 9)
        >>> print(l2)
        ((1 -> 2 -> 3 -> 4) -> (5 -> 6 -> (7 -> 8)) -> 9)
        >>> l2.add_back(LinkedList(10, 11))
        >>> print(l2)
        ((1 -> 2 -> 3 -> 4) -> (5 -> 6 -> (7 -> 8)) -> 9 -> (10 -> 11))
        '''
        
        new_node = Node(el)
        if self.length == 0:
            self.head = new_node
        else:
            self.tail.next = new_node
        self.tail = new_node
        self.length += 1
        pass

    def pop(self, index = 0):
        '''
        Удаляет элемент списка на позиции index с конца и с начала cо сложностью O(1), а произвольный элемент списка за O(n),
        и возвращает значение удаленного элемента.

        >>> l1 = LinkedList(1, 2, 3, 4)
        >>> print(l1)
        (1 -> 2 -> 3 -> 4)
        >>> l1.pop()
        1
        >>> print(l1)
        (2 -> 3 -> 4)
        >>> l1.pop(1)
        3
        >>> print(l1)
        (2 -> 4)

        >>> l1.pop(10)
        Traceback (most recent call last):
            ...
        IndexError: pop index out of range
        '''
        
        if index >= self.length or index < -self.length:
            raise IndexError("pop index out of range")
        if index < 0:
            index = self.length + index
        if index == 0:
            value = self.head.data
            self.head = self.head.next
            if self.length == 1:
                self.tail = None
        else:
            prev_node = self.head
            for _ in range(index - 1):
                prev_node = prev_node.next
            value = prev_node.next.data
            prev_node.next = prev_node.next.next
            if index == self.length - 1:
                self.tail = prev_node
        self.length -= 1
        return value
        

    def __add__(self, other): 
        '''
        other - только LinkedList обьект, в противном случае - ошибка

        >>> l1 = LinkedList(1, 2, 3)
        >>> l2 = LinkedList(4, 5)
        >>> l3 = l1 + l2
        >>> print(l3)
        (1 -> 2 -> 3 -> 4 -> 5)
        >>> print(l3 + [1, 2])
        Traceback (most recent call last):
            ...
        TypeError: can only concatenate LinkedList (not "list") to LinkedList
        >>> print(l3 + 1)
        Traceback (most recent call last):
            ...
        TypeError: can only concatenate LinkedList (not "int") to LinkedList
        '''
        
        if not isinstance(other, LinkedList):
            raise TypeError("can only concatenate LinkedList (not {}) to LinkedList".format(type(other).__name__))

        new_list = LinkedList()
        node = self.head
        while node:
            new_list.add_back(node.data)
            node = node.next

        other_node = other.head
        while other_node:
            new_list.add_back(other_node.data)
            other_node = other_node.next

        return new_list
        pass
    
    def __getitem__(self, index):
        '''
        Этот метод позволяет доступаться до элементов списка по индексу и возвращать значение элемента (сложность O(n)), например:

        >>> l1 = LinkedList(1,2,3)
        >>> l1[1]
        2
        >>> l1[0]
        1

        >>> l1[10]
        Traceback (most recent call last):
            ...
        IndexError: list index out of range
        '''
        
        if index >= self.length or index < -self.length:
            raise IndexError("list index out of range")
        if index < 0:
            index = self.length + index
        node = self.head
        for _ in range(index):
            node = node.next
        return node.data
        pass

    def __setitem__(self, key, value):
        '''
        Этот метод позволяет присваивать значение элементу списка найденному по индексу (сложность O(n)), например:

        >>> l1 = LinkedList(1,2,3)
        >>> l1[1] = 5
        >>> l1
        LinkedList(1, 5, 3)
        >>> l1[10]
        Traceback (most recent call last):
            ...
        IndexError: list index out of range
        '''
        
        if key >= self.length or key < -self.length:
            raise IndexError("list index out of range")
        if key < 0:
            key = self.length + key
        node = self.head
        for _ in range(key):
            node = node.next
        node.data = value
        pass
            
    def __len__(self):
        '''
        Вызывается при передаче экземпляра класса LinkedList в встроенную функцию len() -> возвращается длина связанного списка

        >>> l1 = LinkedList(1,2,3)
        >>> len(l1)
        3
        '''
        
        return self.length
        pass

    def __str__(self):
        node = self.head
        values = []
        while node:
            values.append(str(node.data))
            node = node.next
        return "(" + " -> ".join(values) + ")"
        pass

    def __repr__(self):
        node = self.head
        data_list = []
        while node:
            if isinstance(node.data, LinkedList):
                data_list.append(repr(node.data))
            else:
                data_list.append(node.data)
            node = node.next
        return f"LinkedList({', '.join(map(str, data_list))})"
        pass



class Pair:
    def __init__(self, key, value):
        self.key = key
        self.value = value

class HashTable:
    def __init__(self, size=10):
        '''
        Хэш-таблица с разрешением коллизий методом цепочек, структура должна содержать в себе следующие аттрибуты:
        1. Массив (используйте питоновский список), в котором могут храниться LinkedList или None;
        2. Целое число, которое описывает сколько в данный момент содержится пар (экземпляров класса Pair) в Хэш-таблице;
        3. Связанный список (используйте LinkedList из лаб.раб. №2), в котором будут хранится ключи пар добавляемых в хэш-таблицу (см. описание __str__, keys и примеры)
        '''
        self.value = [None] * size
        self.count = 0
        self.keys_list = LinkedList()
        pass

    def __str__(self):
        '''
        Выводит информацию о хранимых хэш-таблицей парах, в порядке их добавления
        '''
        pairs = []
        node = self.keys_list.head
        while node:
            key = node.data
            value = self[key]
            pairs.append(f"'{key}' : {value}")
            node = node.next
        return "{" + ", ".join(pairs) + "}"
        pass

    def __setitem__(self, key, value):
        '''
        >>> ht1 = HashTable()
        >>> ht1['key2'] = 10
        >>> ht1['key1'] = 5
        >>> ht1['key3'] = 15
        >>> ht1[0] = 20
        >>> print(ht1)
        {'key2' : 10, 'key1' : 5, 'key3' : 15, 0 : 20}
        '''
        index = self._hash(key)
        pair = Pair(key, value)
        if self.value[index] is None:
            self.value[index] = LinkedList()
        self.value[index].append(pair)
        self.keys_list.append(key)
        self.count += 1
        pass

    def __getitem__(self, key):
        '''
        >>> ht1 = HashTable()
        >>> ht1['key2'] = 10
        >>> ht1['key1'] = 5
        >>> ht1['key1']
        5
        >>> ht1[10]
        Traceback (most recent call last):
            ...
        KeyError: '10'
        '''
        index = self._hash(key)
        if self.value[index] is None:
            raise KeyError(f"'{key}'")
        node = self.value[index].head
        while node:
            if node.data.key == key:
                return node.data.value
            node = node.next
        raise KeyError(f"'{key}'")
        pass

    def _hash(self, key):
        '''
        Хэш-функция, которая преобразует ключ в число, представляющее индекс массива
        '''
        return hash(key) % len(self.value)
        pass

    def pop(self, key):
        '''
        Удаляет по ключу элемент из хэш-таблицы и возвращает значение удаленного элемента

        >>> ht1 = HashTable()
        >>> ht1['key2'] = 10
        >>> ht1['key1'] = 5
        >>> ht1['key3'] = 15
        >>> ht1[0] = 20
        >>> ht1.pop('key1')
        5
        >>> print(ht1)
        {'key2' : 10, 'key3' : 15, 0 : 20}
        >>> ht1.pop(100)
        Traceback (most recent call last):
            ...
        KeyError: '100'
        '''
        index = self._hash(key)
        if self.array[index] is None:
            raise KeyError(f"'{key}'")
        node = self.array[index].head
        prev = None
        while node:
            if node.data.key == key:
                value = node.data.value
                if prev:
                    prev.next = node.next
                else:
                    self.array[index].head = node.next
                self.keys_list.remove(key)
                self.count -= 1
                return value
            prev = node
            node = node.next
        raise KeyError(f"'{key}'")
        pass

    def keys(self):
        '''
        Возращает ключи хранимые, хэш-таблицей в виде экземпляра класса LinkedList
        '''
        return self.keys_list
        pass

def romanToInt(romNum: str):
    '''
    Принимает на вход римское число в виде строки и переводит его в целое
    >>> romanToInt('IV')
    4
    >>> romanToInt('LVIII')
    58
    >>> romanToInt('MCMXCIV')
    1994
    '''
    roman_numerals = {
        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000
    }
    result = 0
    prev_value = 0

    for char in romNum[::-1]:
        value = roman_numerals[char]

        if value < prev_value:
            result -= value
        else:
            result += value
        prev_value = value
    return result
    pass

def rareWord(s: str) -> str:
    '''
    Принимает на вход строку и выводит слово, которое встречается во фразе реже всего.
    Если редких слов несколько, нужно вывести то, которое меньше в лексикографическом порядке.
    Регистр слов не учитывается (приводите к нижнему), знаки препинания в предложениях игнорируются.
    >>> rareWord('aa, bb, AA, BB')
    'aa'
    >>> rareWord('bb, ccc, a, DDDD')
    'a'
    '''
    import re

    words = re.findall(r'\b\w+\b', s.lower())
    word_counts = {}

    for word in words:
        word_counts[word] = word_counts.get(word, 0) + 1

    min_count = min(word_counts.values())
    rarest_words = [word for word, count in word_counts.items() if count == min_count]
    rarest_words.sort()

    return rarest_words[0]
    pass
  
